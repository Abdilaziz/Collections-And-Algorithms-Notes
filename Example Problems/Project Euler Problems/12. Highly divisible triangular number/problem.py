# coding=utf-8


# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# 
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

import math

# So a triangle number is related to sides of an equilateral triangle,
# but formula for for 7th triangle number is 1+2+3+..+7 = 28

def triangleNumb(n):
    numb = 0
    for i in range(1,n+1):
        numb += i
    return numb

def triangleNumb2(n):
    return int(n*(n+1)/2)

# print triangleNumb(7)
# print triangleNumb2(7)

# brute force (not the best)
def numbOfDivisors(numb):
    divisorRange = range(1,numb+1)
    divisors = []
    for x in divisorRange:
        if numb%x == 0:
            divisors.append(x)
    return len(divisors)

def numbOfDivisors2(numb):
    numberOfDiv = 0
    sqrtOfNumb = int(math.sqrt(numb))
    # upper limit of sqrt of numb due to the fact that 
    # sqrt(x)*sqrt(x)=x if one is higher thant sqrt, the other is lower, 
    # one of the two factors needs to be less than or equal to the sqrt
    # can use x/fact1 = fact2 if you want them all
    for i in range(1, sqrtOfNumb+1):
        if (numb%i == 0):
            numberOfDiv += 2
    if sqrtOfNumb*sqrtOfNumb == numb:
        numberOfDiv -= 1
    return numberOfDiv
    

# print numbOfDivisors2(15)

# first triangle number to have over 500 divisors
# currentTriangleVal = 0
# i = 1
# while numbOfDivisors2(currentTriangleVal) < 500:
#     currentTriangleVal += i
#     i += 1

# print currentTriangleVal

# More efficient way to find a number of divisors is based on prime factorization of a number
# Any integer greater than 1 is either a prime number, or a unique product of prime numbers
# Example: https://www.mathsisfun.com/prime-factorization.html
# The number 12. 
# We start with the smallest prime number (2).
# 12/2 = 6, which means that 2 is a prime factor to 12.
# We try again to divide the remainder with 2 again:
# 6/2 = 3. Three is a prime number as well, so we now have the complete factorization which is
# Prime factorization of 12 is 2,2,3 and we can check that 223=12.

# It requires a list of prime numbers
# aquired by using SieveOfEratosthenes

def SieveOfEratosthenes(n): 
      
    # Create a boolean array "prime[0..n]" and initialize 
    #  all entries it as true. A value in prime[i] will 
    # finally be false if i is Not a prime, else true. 
    prime = [True for i in range(n+1)] 
    p = 2
    while (p * p <= n): 
          
        # If prime[p] is not changed, then it is a prime 
        if (prime[p] == True): 
              
            # Update all multiples of p 
            for i in range(p * p, n+1, p): 
                prime[i] = False
        p += 1
      
    # Print all prime numbers
    primeArrayOutput = []
    for p in range(2, n): 
        if prime[p]: 
            primeArrayOutput.append(p) 
    return primeArrayOutput


def primeFactorizationNOD(number, listOfPrimeNumb):
    numberOfDivisors = 1
    remain = number
    for i in range(len(listOfPrimeNumb)):
        # In case there is a remainder this is a prime factor as well
        # The exponent of that factor is 1 
        if (listOfPrimeNumb[i] * listOfPrimeNumb[i] > number):
            return numberOfDivisors*2
        exponent = 1
        while remain%listOfPrimeNumb[i] == 0:
            exponent+=1
            remain = remain/listOfPrimeNumb[i]
        numberOfDivisors *= exponent

        if remain == 1:
            return numberOfDivisors

    return numberOfDivisors

listOfPrimeNumb = SieveOfEratosthenes(75000)

currentTriangleVal = 0
i = 1
while primeFactorizationNOD(currentTriangleVal, listOfPrimeNumb) < 500:
    currentTriangleVal += i
    i += 1

print currentTriangleVal