# Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
# 
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
# find the sum of the even-valued terms.

# def fib (n):
#     sumVal = 0
#     twoBefore = 0
#     oneBefore = 0
#     val = 0
#     for i in range(0, n+1):
#         if i <= 1:
#             val = 1
#             twoBefore = oneBefore            
#             oneBefore = val
#         else:
#             val = twoBefore + oneBefore
#             twoBefore = oneBefore
#             oneBefore = val
        
#         if ( i!=0 and i%2 == 0):
#             if (val <= 4000000):
#                 sumVal += val
#             else:
#                 break
            
#     return val, sumVal

ans = 0
x = 1  # Represents the current Fibonacci number being processed
y = 2  # Represents the next Fibonacci number in the sequence
while x <= 4000000:
    if x % 2 == 0:
        ans += x
    x, y = y, x + y # swaps: temp = y , y = x + y, x = temp

print ans

# print fib(100000000)
# print fib(2)