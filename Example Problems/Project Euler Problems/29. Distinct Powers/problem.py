# coding=utf-8

# Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:

# 2^2=4, 2^3=8, 2^4=16, 2^5=32
# 3^2=9, 3^3=27, 3^4=81, 3^5=243
# 4^2=16, 4^3=64, 4^4=256, 4^5=1024
# 5^2=25, 5^3=125, 5^4=625, 5^5=3125
# If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

# How many distinct terms are in the sequence generated by ab for 2 <= a <= 100 and 2 <= b <= 100?


# Brute Force Solution

# Find every combo of a^b and keep track of the unique ones you have seen before

# put them into a set?
# a set can only hold a value once so if we can check the set to see if it contains a value we have seen before


uniqueTerms= set() # cant use {} to create an empty set, python will say it is a dictionary

for a in range(2,101):
    for b in range(2,101):
        value = a**b
        uniqueTerms.add(value) # add more than one value to a set with the update function and input an array

print "Number of Unique Terms: " + str(len(uniqueTerms))


# Difference between storing into a set and into a list

# if we used a list, we would have to check if the value is contained already in the list
# every time before we do
# however for a set this is implied and we dont need to check

# insertion into a set is a slower process than inserting into an array, however checking 
# the contains is much faster for a set, and is therefore much faster
# Especially if it is sorted